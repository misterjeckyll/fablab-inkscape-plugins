#!/usr/bin/env python

# These two lines are only needed if you don't put the script directly into
# the installation directory
import sys
sys.path.append('/usr/share/inkscape/extensions')

# We will use the inkex module with the predefined Effect base class.
import inkex
# The simplestyle module provides functions for style parsing.
from simplestyle import *
import simplepath

from fablab_lib import BaseEffect, print_
from fablab_box_lib import BoxEffect, BoxGenrationError


def unsignedLong(signedLongString):
    longColor = long(signedLongString)
    if longColor < 0:
        longColor = longColor & 0xFFFFFFFF
    return longColor


def getColorString(longColor):

    longColor = unsignedLong(longColor)
    hexColor = hex(longColor)[2:-3]
    hexColor = hexColor.rjust(6, '0')
    return '#' + hexColor.upper()


class BoxGeneratorEffect(BaseEffect, BoxEffect):

    def __init__(self):
        """
        Constructor.
        Defines the "--what" option of a script.
        """
        # Call the base class constructor.
        BaseEffect.__init__(self)

        self.OptionParser.add_option('-i', '--path_id', action='store',
                                     type='string', dest='path_id', default='box',
                                     help='Id of svg path')

        self.OptionParser.add_option('--width', action='store',
                                     type='float', dest='width', default=200,
                                     help='Width')
        self.OptionParser.add_option('--depth', action='store',
                                     type='float', dest='depth', default=100,
                                     help='Depth')
        self.OptionParser.add_option('--height', action='store',
                                     type='float', dest='height', default=50,
                                     help='Height')
        self.OptionParser.add_option('--thickness', action='store',
                                     type='float', dest='thickness', default=3,
                                     help='Thickness of material')
        self.OptionParser.add_option('--tab_size', action='store',
                                     type='float', dest='tab_size', default=10,
                                     help='Tab size')
        self.OptionParser.add_option('--backlash', action='store',
                                     type='float', dest='backlash', default=0.1,
                                     help='Backlash generated by lasercut')
        self.OptionParser.add_option('--closed', action="store",
                                     type='choice', choices=['true', 'false'], dest='closed', help='Closed box', default='false')

        self.start_stop = {}

    def effect(self):
        print_(self.options)

        parent = self.current_layer
        centre = self.view_center
        print_("-- %s -- %s --" % (centre[0], centre[1]))

        fgcolor = "#FF0000"
        bgcolor = None
        try:
            if(self.options.closed == 'true'):
                for shape in self.box_with_top(self.options.path_id, centre[0], centre[1], bgcolor, fgcolor, self.options.width, self.options.depth, self.options.height, self.options.tab_size, self.options.thickness, self.options.backlash):
                    inkex.etree.SubElement(parent, inkex.addNS('path', 'svg'), shape)
            else:
                for shape in self.box_without_top(self.options.path_id, centre[0], centre[1], bgcolor, fgcolor, self.options.width, self.options.depth, self.options.height, self.options.tab_size, self.options.thickness, self.options.backlash):
                    inkex.etree.SubElement(parent, inkex.addNS('path', 'svg'), shape)
        except BoxGenrationError as e:
            inkex.errormsg(e.value)
        #inkex.etree.SubElement(parent, inkex.addNS('path','svg'), ell_attribs )


if __name__ == '__main__':
    effect = BoxGeneratorEffect()
    effect.affect()
