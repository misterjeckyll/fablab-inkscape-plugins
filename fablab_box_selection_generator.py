#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''
Inkscape Extension to draw lasercut ready Box paths from selection and options
'''

import sys
sys.path.append('/usr/share/inkscape/extensions')

# We will use the inkex module with the predefined Effect base class.
import inkex,simplepath,simplestyle
# The simplestyle module provides functions for style parsing.
from fablab_lib import BaseEffect
from fablab_box_lib import BoxEffect

#----------------------------------------------------------------#
# Utility functions
#----------------------------------------------------------------#

def print_(*arg):
    f = open("fablab_debug.log", "a")
    for s in arg:
        s = str(unicode(s).encode('unicode_escape')) + " "
        f.write(s)
    f.write("\n")
    f.close()

#----------------------------------------------------------------#
# Box generator class
#----------------------------------------------------------------#
class BoxSelectionGeneratorEffect(BaseEffect, BoxEffect):

    def __init__(self):
        """
        Constructor.
        Defines the "--what" option of a script.
        """
        # Call the base class constructor.
        BaseEffect.__init__(self)

        ### The list of shapes to draw
        self.list_of_paths = []

        ### Parameters
        self.OptionParser.add_option('-i', '--path_id', action='store',type='string',   dest='path_id',     default='box',  help='Id of svg path')
        self.OptionParser.add_option('--height',        action='store',type='float',    dest='height',      default=50,     help='Hauteur de la boite')
        self.OptionParser.add_option('--thickness',     action='store',type='float',    dest='thickness',   default=3,      help='Epaisseur du materiau')
        self.OptionParser.add_option('--backlash',      action='store',type='float',    dest='backlash',    default=0.1,    help='Matière enlevé par le laser')
        self.OptionParser.add_option('--type',          action="store",type='string',   dest='type',        default='e',    help='type de boite')
        self.OptionParser.add_option('--tab_size',      action='store',type='float',    dest='tab_size',    default=10,     help='Tab size')
        self.OptionParser.add_option('--layeroffset',      action='store',type='float',    dest='layeroffset',    default=0,     help='espace libre au dessus des compartiements')
        self.OptionParser.add_option("", "--active-tab",action="store",type="string",   dest="active_tab",  default='title',help="Active tab.")

#------------------------------------------------------------------#
# Main function called when the extension is run.
#------------------------------------------------------------------#
    def effect(self):

        ### Get width, depth and intern layer position from selection
        width, depth = 0,0
        segment_pos = {'V':[],'H':[]}
        for id,node in self.selected.iteritems():
            if node.tag == inkex.addNS('rect','svg'):
                # Get selected rectangle info
                x_pos = float(node.get('x'))
                y_pos  = float(node.get('y'))
                depth = float(node.get('height'))
                width = float(node.get('width'))
            elif node.tag == inkex.addNS('path','svg'):
                # Put the selected segment position in a dictionnary
                pathrepr = node.get('d').replace(',',' ').split()
                segment_pos['V'].append(float(pathrepr[1])) if ('V'or'v') in pathrepr else None
                segment_pos['H'].append(float(pathrepr[2])) if ('H' or 'h') in pathrepr else None

        if(width==0 or depth == 0):# exit if no rectangle selected
            inkex.debug("Aucun rectangle n'a été sélectionné")
            exit()

        ### Gather incoming params
        centre = self.view_center
        layeroffset = self.options.layeroffset
        height = self.options.height
        backlash = self.options.backlash
        thickness = self.options.thickness
        tab_size = self.options.tab_size
        free = 3.

        self.prefix = self.options.path_id
        self.fg = "#FF0000"
        self.bg = None
        self.boxparams = (width, depth,height, tab_size,thickness ,backlash)

        ### Create a dictionary of the offset to the rectangle of each selected segments
        segment_offset = {'V':[],'H':[]}
        [[segment_offset[key].append(position-y_pos)if key=='H' else segment_offset[key].append(position-x_pos)] for key,elt_list in segment_pos.iteritems() for position in elt_list ]

        ### Layout of the different parts of the box
        self.layout = {
            'bottom' : [0,0],
            'top' : [free + width,0],
            'front' : [0,depth+free],
            'back' : [width+free,depth + free],
            'left' : [2*free,depth + height+2*free],
            'right' : [depth+3*free,depth + height+2*free],
            'Hlayer' : [2*free,depth + 2*height+3*free],
            'Vlayer' : [4*free+width,depth + 2*height+3*free]
        }
        ### Decide wich type of box to generate
        arglist = [centre[0], centre[1],segment_offset,layeroffset]
        type =self.options.type
        if type=='f':
            self.box_with_top_selection(*arglist)
        elif type=='o':
            self.box_without_top_selection(*arglist,lid = False),
        elif type=='oc':
            self.box_without_top_selection(*arglist,lid = True),
        elif type=='oe':
            self.box_without_top_stackable_selection(*arglist,lid = False)

        ### Create a group for each parts of the box
        parent = {}
        [parent.setdefault(group_name,inkex.etree.SubElement(self.current_layer, 'g', {inkex.addNS('label', 'inkscape'): self.options.path_id+"_"+group_name})) for group_name in ['bottom','top','front','back','left','right','Horizontal','Vertical']]
        ### Add every shapes in the correct group based on its id
        for shape in self.list_of_paths:
            id_split=shape.get('id').split('_')
            inkex.etree.SubElement(parent[id_split[1]], inkex.addNS('path', 'svg'), shape)

        # silly easter egg
        if(self.options.path_id == "hhbbgdgdba"):
            inkex.etree.SubElement(self.current_layer,inkex.addNS('path', 'svg'),{'style':simplestyle.formatStyle({'stroke-width':0.1,'stroke':'#000000','fill':'#000000'}),'d':'m -80.8615,232.49834 c -0.59588,-0.13342 -4.22621,-0.17631 -9.72161,-0.11486 -11.25209,0.12582 -15.72955,-0.14213 -20.49993,-1.22682 -0.75554,-0.1718 -3.51352,-0.50593 -6.12884,-0.74251 -2.61533,-0.23659 -6.22924,-0.58071 -8.03091,-0.76473 -2.17912,-0.22256 -5.28182,-0.33263 -9.26809,-0.32878 -5.23443,0.005 -6.19344,-0.0457 -7.58247,-0.4009 -4.62086,-1.18182 -7.48199,-3.86717 -6.8038,-6.38578 0.5261,-1.95378 2.85128,-3.4458 7.27556,-4.6686 8.76859,-2.42351 13.20457,-5.6085 14.1347,-10.14857 0.83163,-4.05924 1.03344,-5.67969 0.90159,-7.23941 -0.4575,-5.41216 -2.92922,-9.51707 -10.49553,-17.43042 -7.39237,-7.73145 -13.75568,-17.56248 -16.47822,-25.45815 -0.45387,-1.31626 -0.96541,-2.61186 -1.13679,-2.87911 -0.96707,-1.5082 -1.71662,-5.54991 -1.93221,-10.41887 -0.26149,-5.90564 -0.69327,-8.54162 -1.58477,-9.67499 -0.23356,-0.29691 -1.12534,-0.88607 -1.98175,-1.30923 -1.70294,-0.84144 -3.0663,-1.91064 -6.52971,-5.12089 -1.25291,-1.16134 -2.84629,-2.43505 -3.54084,-2.83049 -0.69455,-0.39543 -1.54189,-0.88046 -1.88296,-1.07782 -1.15668,-0.66932 -1.38096,-3.24748 -0.66028,-7.59017 0.39381,-2.373 0.44864,-2.51633 1.65746,-4.33246 0.68761,-1.03304 2.51433,-3.97052 4.05939,-6.52773 3.30003,-5.46184 4.84412,-7.724173 7.14008,-10.461305 4.00266,-4.771805 6.77115,-6.497769 13.89767,-8.664249 5.20296,-1.581707 8.05692,-2.905436 8.53731,-3.959786 0.12808,-0.281109 0.99717,-3.570952 1.93129,-7.310758 2.82544,-11.311755 4.24968,-15.70552 6.6178,-20.415938 1.99717,-3.972552 4.00875,-6.763098 7.34057,-10.183125 1.38429,-1.420947 2.12078,-1.989317 3.35821,-2.591654 6.51781,-3.172623 13.65099,-0.677144 14.59204,5.104889 0.10543,0.647765 0.28809,1.274167 0.40593,1.391999 0.34123,0.341238 1.35456,-0.271637 4.12825,-2.496839 3.18602,-2.555985 4.77441,-3.387168 6.1719,-3.229654 1.36607,0.15398 2.18408,1.056105 2.70601,2.98428 0.44458,1.642394 0.55249,1.025918 -1.50625,8.604821 -2.00945,7.39742 -3.97571,12.262752 -6.51273,16.115184 -1.34147,2.036996 -4.13471,5.08975 -5.91094,6.460099 -2.0187,1.557415 -4.48885,5.688356 -5.5114,9.216941 -0.28975,0.999888 -0.62706,2.880838 -0.74956,4.179885 -0.1225,1.299053 -0.6932,4.515785 -1.2682,7.148296 -1.44262,6.604614 -1.74614,8.820824 -1.64732,12.028404 0.0749,2.43269 0.13395,2.75798 0.70926,3.90978 0.58474,1.17066 0.73676,1.31133 2.22953,2.06318 3.23804,1.63086 6.07862,1.55935 12.16841,-0.30632 7.75349,-2.37537 8.77509,-2.52496 13.61019,-1.99299 11.60969,1.27732 18.01056,2.77828 25.03159,5.86973 5.22049,2.29864 7.42657,3.55997 11.20099,6.40418 2.97041,2.23835 5.55545,4.54826 10.58421,9.45772 3.41598,3.33495 4.37278,4.41544 6.2566,7.06536 8.10961,11.40766 12.79369,22.2282 14.07079,32.50453 0.28943,2.32885 0.17517,27.12557 -0.13487,29.27052 -0.58246,4.02963 -0.76453,4.57509 -2.14305,6.42029 -3.66844,4.91029 -3.72749,5.2884 -1.10672,7.08583 0.64033,0.43916 0.68654,0.55241 0.68221,1.67188 -0.009,2.34603 -1.27104,3.99346 -4.0959,5.34696 -0.94121,0.45096 -2.61477,1.04778 -3.71902,1.32626 -2.69153,0.67877 -9.93826,1.9105 -15.0051,2.55043 -2.26661,0.28627 -5.63216,0.7155 -7.47899,0.95385 -6.38161,0.8236 -12.47774,0.77298 -15.63024,-0.12979 -1.66281,-0.47617 -3.16128,-0.57978 -4.07704,-0.28191 -0.44892,0.14601 -1.76287,0.82306 -2.9199,1.50454 -1.15703,0.68147 -2.59438,1.42263 -3.19409,1.64701 -1.36926,0.51231 -3.29208,0.68583 -4.52951,0.40876 z m 3.50158,-1.76238 c 0.57323,-0.17036 2.08835,-0.93348 3.36696,-1.69585 3.49419,-2.08341 4.9519,-2.3921 7.53312,-1.59522 3.78354,1.16805 9.48066,1.11568 19.51833,-0.17939 8.29656,-1.07044 16.49957,-2.42511 18.90853,-3.12262 4.02714,-1.16606 5.75243,-2.37762 6.22241,-4.36959 0.12508,-0.53014 0.0146,-0.7141 -0.95254,-1.58504 -2.39022,-2.15262 -2.2263,-3.59338 0.86953,-7.64249 0.84428,-1.10425 1.65847,-2.29999 1.80935,-2.65722 0.15086,-0.35721 0.44647,-1.7362 0.65691,-3.06441 0.34278,-2.16343 0.38073,-3.87866 0.36445,-16.46902 l -0.0181,-14.05407 -0.58334,-2.74741 c -1.61843,-7.6226 -4.62936,-14.88519 -9.3317,-22.50878 -4.26066,-6.90753 -6.14102,-9.161 -13.16913,-15.78215 -7.29338,-6.87108 -10.56903,-9.11497 -18.29752,-12.53423 -6.4431,-2.85058 -12.60095,-4.3402 -22.72321,-5.4969 -6.10789,-0.69796 -6.90706,-0.61551 -13.31467,1.37379 -4.82019,1.49646 -6.44243,1.83796 -8.87626,1.86852 -2.39267,0.0301 -3.79642,-0.27843 -5.89102,-1.29453 -2.56003,-1.24188 -3.58268,-3.15111 -3.77652,-7.05055 -0.14797,-2.97675 0.15259,-5.23132 1.65255,-12.396215 0.68867,-3.289586 1.25213,-6.393692 1.25213,-6.898022 0,-2.127372 1.20108,-6.563433 2.44009,-9.012208 1.119,-2.211578 3.06486,-4.812559 4.37685,-5.850417 6.06739,-4.799662 9.0518,-10.556354 12.735,-24.564802 1.04914,-3.990261 1.09059,-4.80098 0.31102,-6.0829 -0.82634,-1.358798 -1.96686,-0.90306 -6.23157,2.490075 -3.32054,2.641923 -4.4508,3.151422 -5.6122,2.52986 -0.50238,-0.26887 -1.04499,-1.282752 -1.04499,-1.952605 0,-2.001022 -1.62914,-4.343935 -3.65326,-5.253873 -0.96452,-0.433596 -1.41802,-0.493989 -3.63795,-0.484482 -4.14538,0.01773 -5.76077,0.823899 -9.1855,4.583936 -2.67393,2.935701 -4.27249,5.312827 -6.14407,9.136462 -2.02304,4.133061 -3.45127,8.578353 -6.01274,18.714338 -2.14573,8.490847 -2.23492,8.777965 -2.90474,9.351481 -1.24566,1.066565 -3.92811,2.230868 -8.62464,3.743473 -5.57995,1.797127 -7.7723,2.850417 -10.06688,4.83651 -3.15439,2.730303 -5.83984,6.273554 -10.10741,13.335989 -1.36964,2.26661 -3.13548,5.11969 -3.92409,6.34018 -1.35429,2.09596 -1.45405,2.3363 -1.79825,4.33246 -0.44461,2.57848 -0.49139,5.22222 -0.10072,5.69294 0.15303,0.18439 0.82516,0.62676 1.49362,0.98305 1.30227,0.6941 2.41396,1.59899 6.12411,4.98486 1.68617,1.53878 2.84823,2.40317 4.08492,3.03852 3.71588,1.909 4.10391,2.90982 4.58428,11.82373 0.26736,4.96128 0.67066,7.66795 1.39884,9.38785 0.29917,0.70663 0.94561,2.37848 1.43653,3.7152 3.20826,8.73582 8.77541,17.29416 16.73965,25.73375 4.67453,4.95352 6.85857,7.78476 8.43431,10.93365 2.40497,4.80597 2.65283,8.56051 1.00785,15.26668 -1.16818,4.76237 -5.799,8.13188 -14.75458,10.73582 -1.85979,0.54075 -3.83972,1.23065 -4.39985,1.53309 -1.25089,0.67543 -2.25735,1.78414 -2.25735,2.48669 0,0.78378 1.47073,2.24385 3.02223,3.00034 2.56871,1.25245 3.38118,1.35865 10.71483,1.40066 5.73571,0.0328 7.65183,0.13433 13.84274,0.73318 3.95205,0.38228 8.32678,0.92607 9.72162,1.20841 4.95969,1.00393 5.69023,1.04535 17.43551,0.9887 6.30093,-0.0304 11.36929,0.0303 11.72933,0.14034 0.96941,0.2964 2.45224,0.26371 3.60725,-0.0795 z m -16.07627,-13.99818 c -0.46495,-0.0424 -3.12782,-0.36654 -5.91751,-0.72028 -4.05523,-0.5142 -5.75009,-0.63465 -8.45358,-0.60077 -1.85978,0.0233 -3.48947,0.0305 -3.62152,0.0161 -0.13206,-0.0144 -0.40251,-0.36854 -0.60102,-0.78686 -0.54356,-1.14548 -0.17412,-2.22316 2.03804,-5.9449 2.57873,-4.33848 3.00975,-5.42355 2.9808,-7.50392 l -0.0228,-1.6347 1.51528,-0.74628 c 3.57966,-1.763 6.41325,-1.38196 9.17967,1.2344 1.3614,1.28756 2.80028,3.41552 5.02451,7.43075 0.90145,1.62732 2.06748,3.57693 2.59118,4.33247 1.1267,1.6255 1.37563,2.51089 1.05924,3.76761 -0.1653,0.65657 -0.37491,0.96952 -0.74315,1.10953 -0.48893,0.18589 -3.22542,0.21137 -5.02918,0.0468 z m 4.28926,-2.08509 c 0.0355,-0.2486 -0.33808,-1.02277 -0.86698,-1.79639 -0.51119,-0.74773 -1.80686,-2.92111 -2.87925,-4.82973 -2.42008,-4.30718 -3.2693,-5.56333 -4.60391,-6.80998 -1.98171,-1.85109 -3.47566,-2.22363 -5.92893,-1.47848 -0.80987,0.246 -1.56804,0.56721 -1.68481,0.71381 -0.11677,0.14661 -0.25779,0.93559 -0.31339,1.7533 -0.11828,1.73986 -1.01962,3.84462 -3.08741,7.20949 -1.31149,2.13414 -2.25938,4.04961 -2.08855,4.22045 0.0525,0.0525 1.89121,0.13408 4.08595,0.1812 2.87976,0.0618 5.2551,0.26148 8.53422,0.71728 2.97766,0.41391 5.27223,0.61856 6.65719,0.59376 1.96084,-0.0351 2.11791,-0.0694 2.17587,-0.47471 z'})
if __name__ == '__main__':
    effect = BoxSelectionGeneratorEffect()
    effect.affect()